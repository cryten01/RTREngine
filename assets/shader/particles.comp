#version 430 core

/**
*	This shader is responisble for creating and updating particles using SIMD logic
**/


struct Particle {
	vec4 positionTTL;
	vec4 velocity;
};


layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;		// Represents 1 work group with 256 threads. Every thread is responsible for 1 particle slot.

layout(std430, binding = 0) buffer Particles_in_buffer {				// Buffer blocks that are needed for ping ponging. Every arraypos is responsible for 1 particle slot.
	Particle particles_in[];
};
layout(std430, binding = 1) buffer Particles_out_buffer {				
	Particle particles_out[];
};

layout (binding = 2, offset = 0) uniform atomic_uint slotCount;			// Atomic counter that represents how many particles are already in the buffer slots. Resets to 0 every frame

uniform float DeltaT;
uniform uint MaximumCount;
uniform uint SpawnCount;	// The amount of particles that need to be spawend
uniform uint LastCount;		// The amount of particles that were in the last frame

uniform vec3 RandomRange;

uniform vec3 GRAVITY;
uniform vec3 WIND;


/**
*	Adds updated particles to the output list
**/
void addToOutputList(Particle particle) { 

	// Increment the atomic counter and use its previous value which equals the particles index
	uint particleIndex = atomicCounterIncrement(slotCount);	

	// Check if max particles is reached
	if (particleIndex >= MaximumCount) {
		atomicCounterDecrement(slotCount);
		return;
	}
	
	// Write current particle into particles_out buffer
	particles_out[particleIndex] = particle;
}

/**
*	Create new particle only if last count is not reached
**/
Particle createSnowParticle(Particle reference)
{
	Particle p;

	float height = 40;

	p.positionTTL = vec4(RandomRange.x, height, RandomRange.z, height);
	p.velocity = vec4(0.0);

	return p;
}



/**
*	Updates particle attributes with physics etc.
**/
Particle updateParticle(Particle particle)
{
	// Update TimeToLive
	particle.positionTTL.w = particle.positionTTL.w - DeltaT;

	// Continue updating only particle when alive
	if (particle.positionTTL.w > 0.0)
	{
		// Physics (add wind or other forces here)
		vec3 forces = GRAVITY;

		forces += WIND;

		// Velocity after physics was applied
		particle.velocity.xyz = particle.velocity.xyz + forces * DeltaT;

		// Position with velocity
		particle.positionTTL.xyz = particle.positionTTL.xyz + particle.velocity.xyz * DeltaT;
	}

	return particle;
}


/**
*	Help
*	gl_GlobalInvocationID	ID of thread within dispatch
**/
void main() {

	// Unique one-dimensional index that is used as slotIndex (1 thread = 1 processing unit for 1 particle slot)
	uint threadIndex = gl_GlobalInvocationID.x;

	// Checks if specific thread needs to process a particle
	if (threadIndex >= LastCount) return;
	
	// Get values of particle slot
	Particle p = particles_in[threadIndex]; 

	// Check if particle is alive
	if (p.positionTTL.w > 0.0) {
		p = updateParticle(p);
		addToOutputList(p);
	} 
	
	if (SpawnCount > 0) {
		p = createSnowParticle(p);
		addToOutputList(p);
	}

}
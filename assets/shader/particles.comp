#version 430 core

/*
* This shader is responisble for updating particle physics using SIMD logic 
*/

struct Particle
{
	vec4 positionTTL;
	vec4 velocity;
};

// Represents 1 work group with 256 threads
layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;		

// Buffer blocks (1 per attribute * 2 because of pingPonging)
layout(std430, binding = 0) buffer Particles_in_buffer {
	Particle particles_in[];
};

layout(std430, binding = 1) buffer Particles_out_buffer {
	Particle particles_out[];
};

// Current particle count as atomic counter (used simultaneously in every thread)
layout (binding = 2, offset = 0) uniform atomic_uint particleCount;		



uniform float DeltaT;
uniform uint MaximumCount;
uniform uint LastCount;
uniform vec3 GRAVITY;



void addParticleToOutputList(vec3 pos, vec3 vel, float TTL) { 

	// Increment the atomic counter and use its previous value
	uint particleIndex = atomicCounterIncrement(particleCount);	

	// Check if max particles is reached
	if (particleIndex >= MaximumCount) {
		atomicCounterDecrement(particleCount);
		return;
	}
	
	// Set all particle attributes
	particles_out[particleIndex].positionTTL = vec4(pos, TTL);
	particles_out[particleIndex].velocity = vec4(vel, 0);
}


void main() {

	// Help
	// gl_GlobalInvocationID	ID of thread within dispatch

	// Unique one-dimensional index of workgroup
	uint threadIndex = gl_GlobalInvocationID.x;

	// Bound check
	if (threadIndex >= LastCount) return;

	// Receive position and velocity of particle from workgroup
	vec3 ParticlePos = vec3(particles_in[threadIndex].positionTTL.xyz);
	vec3 ParticleVel = vec3(particles_in[threadIndex].velocity.xyz);

	// Add wind or other forces here
	vec3 forces = GRAVITY;

	// Determine new velocity after forces were applied
	vec3 velocity = ParticleVel + DeltaT * forces;

	// Update position with velocity
	vec3 pos = ParticlePos + DeltaT * velocity;
	
	// Update TimeToLive
	float TTL = particles_in[threadIndex].positionTTL.w - DeltaT;

	// Check if particle is still alive and add it to the output list
	if (TTL > 0) {		
		addParticleToOutputList(ParticlePos, ParticlePos, TTL);
	};
}